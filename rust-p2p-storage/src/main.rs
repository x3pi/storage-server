use axum::{
    extract::{Path, State},
    http::StatusCode,
    routing::{get, post},
    Json, Router,
};
use serde::{Deserialize, Serialize};
use std::net::SocketAddr;
use std::sync::Arc;

// ## C√ÅC C·∫§U TR√öC D·ªÆ LI·ªÜU ##

// Struct ƒë·ªÉ nh·∫≠n payload khi Go Listener g·ªçi /store
#[derive(Deserialize)]
struct StorePayload {
    #[serde(rename = "fileKey")]
    file_key: String,
    #[serde(rename = "chunkHash")]
    chunk_hash: String,
    #[serde(rename = "chunkData")]
    chunk_data: String, // D·ªØ li·ªáu chunk ·ªü d·∫°ng Base64
}

// Struct ƒë·ªÉ tr·∫£ v·ªÅ khi Go Downloader g·ªçi /file/:fileKey
#[derive(Serialize)]
struct FileChunksResponse {
    #[serde(rename = "fileKey")]
    file_key: String,
    chunks: Vec<Chunk>,
}

// Struct ƒë·∫°i di·ªán cho m·ªôt chunk trong m·∫£ng tr·∫£ v·ªÅ
#[derive(Serialize)]
struct Chunk {
    key: String,   // Key t·ªïng h·ª£p, v√≠ d·ª•: "0x...:0x..."
    value: String, // D·ªØ li·ªáu chunk ·ªü d·∫°ng Base64
}

// Struct ƒë·ªÉ serialize/deserialize d·ªØ li·ªáu chunk trong database
#[derive(Serialize, Deserialize)]
struct StoredChunkValue {
    value: String,
}


// ## H√ÄM MAIN - KH·ªûI T·∫†O SERVER ##

#[tokio::main]
async fn main() {
    // M·ªü ho·∫∑c t·∫°o database. D·ªØ li·ªáu s·∫Ω ƒë∆∞·ª£c l∆∞u trong th∆∞ m·ª•c "my_database"
    let db = sled::open("my_database").expect("Kh√¥ng th·ªÉ m·ªü database");
    
    // B·ªçc database trong Arc ƒë·ªÉ chia s·∫ª an to√†n gi·ªØa c√°c thread
    let shared_state = Arc::new(db);

    // ƒê·ªãnh nghƒ©a c√°c route cho ·ª©ng d·ª•ng
    let app = Router::new()
        .route("/store", post(store_chunk))
        .route("/file/:fileKey", get(retrieve_file_chunks))
        .with_state(shared_state);

    // Ch·∫°y server
    let addr = SocketAddr::from(([127, 0, 0, 1], 3000));
    println!("üöÄ Server l∆∞u tr·ªØ ƒëang l·∫Øng nghe tr√™n http://{}", addr);
    let listener = tokio::net::TcpListener::bind(addr).await.unwrap();
    axum::serve(listener, app).await.unwrap();
}


// ## C√ÅC HANDLER X·ª¨ L√ù REQUEST ##

/// Handler cho vi·ªác L∆ØU TR·ªÆ chunk m·ªõi
async fn store_chunk(
    State(db): State<Arc<sled::Db>>,
    Json(payload): Json<StorePayload>,
) -> StatusCode {
    // T·∫°o key t·ªïng h·ª£p ƒë·ªÉ l∆∞u v√†o database, ƒë·ªãnh d·∫°ng: "fileKey:chunkHash"
    let db_key = format!("{}:{}", payload.file_key, payload.chunk_hash);

    // Chu·∫©n b·ªã value ƒë·ªÉ l∆∞u. Ch√∫ng ta s·∫Ω l∆∞u l·∫°i c·∫•u tr√∫c JSON {"value": "..."}
    let db_value = StoredChunkValue {
        value: payload.chunk_data,
    };

    // Serialize value th√†nh JSON bytes ƒë·ªÉ l∆∞u tr·ªØ
    let value_bytes = match serde_json::to_vec(&db_value) {
        Ok(bytes) => bytes,
        Err(e) => {
            eprintln!("L·ªói khi serialize value: {}", e);
            return StatusCode::INTERNAL_SERVER_ERROR;
        }
    };
    
    println!("-> ƒêang l∆∞u chunk v·ªõi key: {}", db_key);

    // L∆∞u c·∫∑p key-value v√†o Sled DB
    match db.insert(db_key.as_bytes(), value_bytes) {
        Ok(_) => {
            // ƒê·∫£m b·∫£o d·ªØ li·ªáu ƒë∆∞·ª£c ghi xu·ªëng ƒëƒ©a m·ªôt c√°ch b·∫•t ƒë·ªìng b·ªô
            if db.flush_async().await.is_err() {
                eprintln!("L·ªói khi flush database");
                return StatusCode::INTERNAL_SERVER_ERROR;
            }
            StatusCode::OK
        }
        Err(e) => {
            eprintln!("L·ªói khi insert v√†o database: {}", e);
            StatusCode::INTERNAL_SERVER_ERROR
        }
    }
}

/// Handler cho vi·ªác L·∫§Y T·∫§T C·∫¢ chunk c·ªßa m·ªôt file
async fn retrieve_file_chunks(
    State(db): State<Arc<sled::Db>>,
    Path(file_key): Path<String>,
) -> Result<Json<FileChunksResponse>, StatusCode> {
    
    println!("<- ƒêang truy v·∫•n t·∫•t c·∫£ chunk cho fileKey: {}", file_key);
    let mut chunks = Vec::new();
    
    // T·∫°o prefix ƒë·ªÉ qu√©t database. Th√™m d·∫•u ':' ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng l·∫•y nh·∫ßm
    // fileKey kh√°c c√≥ ti·ªÅn t·ªë t∆∞∆°ng t·ª±.
    let prefix = format!("{}:", file_key);

    // Qu√©t t·∫•t c·∫£ c√°c key c√≥ ti·ªÅn t·ªë l√† `file_key:`
    for result in db.scan_prefix(prefix.as_bytes()) {
        match result {
            Ok((key_bytes, value_bytes)) => {
                // Chuy·ªÉn ƒë·ªïi key t·ª´ bytes sang String
                let key_str = match String::from_utf8(key_bytes.to_vec()) {
                    Ok(s) => s,
                    Err(_) => continue, // B·ªè qua n·∫øu key kh√¥ng ph·∫£i UTF-8 h·ª£p l·ªá
                };
                
                // Deserialize value t·ª´ JSON bytes
                let stored_value: StoredChunkValue = match serde_json::from_slice(&value_bytes) {
                    Ok(v) => v,
                    Err(_) => continue, // B·ªè qua n·∫øu value kh√¥ng ph·∫£i JSON h·ª£p l·ªá
                };

                // Th√™m chunk ƒë√£ t√¨m th·∫•y v√†o danh s√°ch
                chunks.push(Chunk {
                    key: key_str,
                    value: stored_value.value,
                });
            }
            Err(_) => {
                // B·ªè qua c√°c key l·ªói
                continue;
            }
        }
    }

    println!("   -> T√¨m th·∫•y {} chunks", chunks.len());

    // T·∫°o response cu·ªëi c√πng
    let response = FileChunksResponse {
        file_key,
        chunks,
    };

    Ok(Json(response))
}